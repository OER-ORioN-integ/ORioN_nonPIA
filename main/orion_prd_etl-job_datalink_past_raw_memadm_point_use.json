{
  "name" : "orion_prd_etl-job_datalink_past_raw_memadm_point_use",
  "jobMode" : "VISUAL",
  "description" : "DMP - OP利用履歴 - データ移行",
  "role" : "arn:aws:iam::142980225941:role/orion_prd_glue-role",
  "executionProperty" : {
    "maxConcurrentRuns" : 1
  },
  "command" : {
    "name" : "glueetl",
    "scriptLocation" : "s3://orion-prd-etljob/scripts/orion_prd_etl-job_datalink_past_raw_memadm_point_use.py",
    "pythonVersion" : "3"
  },
  "defaultArguments" : {
    "--enable-metrics" : "true",
    "--spark-event-logs-path" : "s3://orion-prd-etljob/sparkHistoryLogs/",
    "--enable-job-insights" : "true",
    "--enable-observability-metrics" : "true",
    "--enable-glue-datacatalog" : "true",
    "--SOURCE_SYSTEM" : "DMP",
    "--job-bookmark-option" : "job-bookmark-disable",
    "--DATA_NAME" : "raw_memadm_point_use",
    "--job-language" : "python",
    "--TempDir" : "s3://orion-prd-etljob/tmp/"
  },
  "maxRetries" : 0,
  "allocatedCapacity" : 2,
  "timeout" : 120,
  "maxCapacity" : 2.0,
  "glueVersion" : "4.0",
  "numberOfWorkers" : 2,
  "workerType" : "G.1X",
  "executionClass" : "STANDARD",
  "codeGenConfigurationNodes" : "{\"node-1728644991304\":{\"CustomCode\":{\"ClassName\":\"MyTransformUsagePoint\",\"Code\":\"from decimal import Decimal, InvalidOperation\\nfrom pyspark.sql.functions import udf\\nfrom pyspark.sql.types import StringType\\n\\n### 作成時の修正箇所ここから ###\\n# ポイント丸めの入力項目名と出力項目名の配列\\n入力項目名リスト = [\\\"trd_grt_point\\\", \\\"trd_gvbk_point\\\"]\\n出力項目名リスト = [\\\"trd_grt_point\\\", \\\"trd_gvbk_point\\\"]\\n\\n# 備考として追加する項目名の配列\\n追加項目名リスト = [\\\"trd_grt_point_note\\\", \\\"trd_gvbk_point_note\\\"]\\n### 作成時の修正箇所ここまで ###\\n\\n# メインパラメータ\\ntop = 1000\\n\\n# ポイント丸め\\ndef convert_point(point, top):\\n    if point is None:\\n        return None\\n\\n    # string型なら Decimal型 に変換、int型や小数型ならそのまま。空文字は例外対応\\n    try:\\n        tmp_point = Decimal(point) if isinstance(point, str) else point\\n    except InvalidOperation:\\n        return None\\n\\n    if tmp_point >= top:\\n        return top\\n    else:\\n        return point\\n\\n# ポイント層備考\\ndef convert_point_memo(point, top):\\n    if point is None:\\n        return \\\"－\\\"\\n\\n    # string型なら Decimal型 に変換、int型や小数型ならそのまま。空文字は例外対応\\n    try:\\n        tmp_point = Decimal(point) if isinstance(point, str) else point\\n    except InvalidOperation:\\n        return \\\"－\\\"\\n\\n    if tmp_point >= top:\\n        return f\\\"{top}ポイント以上\\\"\\n    else:\\n        return \\\"－\\\"\\n\\n# UDFの定義\\nconvert_udf_point = udf(lambda point: convert_point(point, top), StringType())\\nconvert_udf_memo = udf(lambda point: convert_point_memo(point, top), StringType())\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# ループ処理で各項目を変換（ポイント丸め）\\nfor 入力項目名, 出力項目名 in zip(入力項目名リスト, 出力項目名リスト):\\n    df = df.withColumn(出力項目名, convert_udf_point(df[入力項目名]))\\n\\n# ループ処理で各項目の備考を追加\\nfor 入力項目名, 追加項目名 in zip(入力項目名リスト, 追加項目名リスト):\\n    df = df.withColumn(追加項目名, convert_udf_memo(df[入力項目名]))\\n\\n# DynamicFrameに変換して返す\\noutput_dyf = DynamicFrame.fromDF(df, glueContext, \\\"output\\\")\\nreturn DynamicFrameCollection({\\\"CustomTransform0\\\": output_dyf}, glueContext)\\n     \",\"Inputs\":[\"node-1728558426190\"],\"Name\":\"【加工】ポイント加工（上限丸め）\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"work_dt\",\"Type\":\"string\"},{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"trnl_num\",\"Type\":\"string\"},{\"Name\":\"trd_num\",\"Type\":\"string\"},{\"Name\":\"trd_knd\",\"Type\":\"string\"},{\"Name\":\"grt_div\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny\",\"Type\":\"string\"},{\"Name\":\"trd_grt_point\",\"Type\":\"string\"},{\"Name\":\"trd_gvbk_point\",\"Type\":\"string\"},{\"Name\":\"trnl_dt\",\"Type\":\"string\"},{\"Name\":\"trnl_tm\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"string\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny_note\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny_note\",\"Type\":\"string\"},{\"Name\":\"trd_grt_point_note\",\"Type\":\"string\"},{\"Name\":\"trd_gvbk_point_note\",\"Type\":\"string\"}]}]}},\"node-1728645644174\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1728644991304\"],\"Name\":\"【加工時必須】加工後処理（ポイント加工（上限丸め））\"}},\"node-1728558426190\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1728558322674\"],\"Name\":\"【加工時必須】加工後処理（金額加工（上限下限丸め））\"}},\"node-1728638294884\":{\"CustomCode\":{\"ClassName\":\"MyTransformOutputOneFileCsv\",\"Code\":\"from datetime import datetime\\nimport boto3\\nfrom awsglue.utils import getResolvedOptions\\nfrom pyspark.sql import DataFrame\\n\\n### 作成時の修正箇所ここから ###\\n#  本ノードは作成時のパラメータ設定不要です。このままお使いください。\\n### 作成時の修正箇所ここまで ###\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformOutputOneFileCsv) start\\\")\\n\\n# Glueジョブ引数の取得\\nglue_params = getResolvedOptions(sys.argv, [\\\"SOURCE_SYSTEM\\\", \\\"DATA_NAME\\\"])\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileCsv) glue_params:{glue_params}\\\")\\n\\n# 連携元システム名（DMP/ONE/OCTPASS）\\nsource_system = glue_params.get(\\\"SOURCE_SYSTEM\\\", None)\\n# データ名（物理テーブル名）\\ndata_name = glue_params.get(\\\"DATA_NAME\\\", None)\\n\\n# プレフィックスヘッド\\nprefix_head = f\\\"{source_system}/{data_name}\\\"\\n\\n# 作業用バケット\\nwork_bucket = \\\"orion-prd-work\\\"\\n# workディレクトリ\\nwork_dir = f\\\"{prefix_head}/dwh_work/\\\"\\n# 一時出力先s3パス\\nwork_s3_path = f\\\"s3://{work_bucket}/{work_dir}\\\"\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# workディレクトリにCSV形式で出力\\ndf.coalesce(1).write.options(encoding=\\\"UTF-8\\\", lineSep=\\\"\\\\n\\\", sep=\\\",\\\", quoteAll=True, header=True).mode(\\\"overwrite\\\").csv(work_s3_path)\\n\\n# 関数定義\\ndef get_process_timestamp_from_df(df: DataFrame, column_name: str) -> str:\\n    \\\"\\\"\\\"DFからデータ統合基盤処理日時 文字列を取得する\\n    Args:\\n        df (pysoar.sql.DataFrame): データフレーム\\n        column_name (str): データ統合基盤処理日時項目名\\n    Returns:\\n        str: yyyymmddhhmmss\\n    \\\"\\\"\\\"\\n    # JSTタイムスタンプカラムの値を取得（yyyy/mm/dd hh:mm:ss形式）\\n    orion_process_datetm = df.select(column_name).first()[0]\\n    # yyyymmddhhmmss形式に変換\\n    res_datetm_str = datetime.strptime(orion_process_datetm, \\\"%Y/%m/%d %H:%M:%S\\\").strftime(\\\"%Y%m%d%H%M%S\\\")\\n    return res_datetm_str\\n\\n# ■実行日時をJSTのyyyyymmddhhmmss文字列に変換\\n# DFの処理日時項目名\\nORION_PROCESS_DATETM = \\\"orion_process_datetm\\\"\\nexecute_timestamp_str = get_process_timestamp_from_df(df=df, column_name=ORION_PROCESS_DATETM)\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (get_process_timestamp_from_df) execute_timestamp_str:{execute_timestamp_str}\\\")\\n\\n# DM_Bdashバケット\\ndm_bdash_bucket = \\\"orion-prd-dm-bdash\\\"\\n# 連携先ディレクトリ\\noutput_prefix = f\\\"{source_system}/{data_name}\\\"\\n# 連携ファイル名\\n# file_name = f\\\"{data_name}_{execute_timestamp_str}.csv\\\"\\nfile_name = f\\\"raw_memadm_point_use_{execute_timestamp_str}.csv\\\"\\n# 連携先key\\nfile_key = f\\\"{output_prefix}/{file_name}\\\"\\n\\n# S3クライアントを使用してworkフォルダに出力したファイルをリネームして移動\\ns3 = boto3.client(\\\"s3\\\")\\ns3_resource = boto3.resource(\\\"s3\\\")\\ntransfer_config = boto3.s3.transfer.TransferConfig(\\n    multipart_threshold = 256*1024*1024,\\n    multipart_chunksize = 256*1024*1024\\n)   \\n\\nresponse = s3.list_objects_v2(Bucket=work_bucket, Prefix=work_dir)\\nfor obj in response.get(\\\"Contents\\\", []):\\n    if obj[\\\"Key\\\"].endswith(\\\".csv\\\"):\\n        copy_source = {\\\"Bucket\\\": work_bucket, \\\"Key\\\": obj[\\\"Key\\\"]}\\n        print(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileCsv) copy_source:{copy_source}, dm_bdash_bucket:{dm_bdash_bucket}, file_key:{file_key}\\\")\\n        # コピーを実行\\n        s3_resource.meta.client.copy(CopySource=copy_source, Bucket=dm_bdash_bucket, Key=file_key, Config=transfer_config)\\n        # 削除を実行\\n        s3.delete_object(Bucket=work_bucket, Key=obj[\\\"Key\\\"])\\n        break\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformOutputOneFileCsv) end\\\")\\n\\n\",\"Inputs\":[\"node-1730279185825\"],\"Name\":\"【必須】１ファイルでb→dash向けDMバケットへ出力\"}},\"node-1730278909444\":{\"DropFields\":{\"Inputs\":[\"node-1728645644174\"],\"Name\":\"【必須】非連携項目の削除\",\"Paths\":[]}},\"node-1727682543308\":{\"S3ParquetSource\":{\"AdditionalOptions\":{\"EnableSamplePath\":false,\"SamplePath\":\"s3://orion-prd-work/DMP/past_raw_memadm_point_use/dwh_tmp/past_raw_memadm_point_use_dwh_20241209090000.snappy.parquet\"},\"Exclusions\":[],\"Name\":\"【必須】連携された正則化済データ\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"work_dt\",\"Type\":\"string\"},{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"trnl_num\",\"Type\":\"string\"},{\"Name\":\"trd_num\",\"Type\":\"string\"},{\"Name\":\"trd_knd\",\"Type\":\"string\"},{\"Name\":\"grt_div\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny\",\"Type\":\"decimal(10,2)\"},{\"Name\":\"point_sub_amtmny\",\"Type\":\"decimal(10,2)\"},{\"Name\":\"trd_grt_point\",\"Type\":\"decimal(10,2)\"},{\"Name\":\"trd_gvbk_point\",\"Type\":\"decimal(10,2)\"},{\"Name\":\"trnl_dt\",\"Type\":\"string\"},{\"Name\":\"trnl_tm\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"string\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"}]}],\"Paths\":[\"s3://orion-prd-work/DMP/past_raw_memadm_point_use/dwh_tmp/\"]}},\"node-1730279185825\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1730279130441\"],\"Name\":\"【加工時必須】加工後処理（項目順序の並替え）\"}},\"node-1728558322674\":{\"CustomCode\":{\"ClassName\":\"MyTransformUsageAmount\",\"Code\":\"from decimal import Decimal, InvalidOperation\\nfrom pyspark.sql.functions import udf\\nfrom pyspark.sql.types import StringType\\n\\n### 作成時の修正箇所ここから ###\\n# 金額丸めの入力項目名と出力項目名の配列\\n入力項目名リスト=[\\\"trd_total_amtmny\\\", \\\"point_sub_amtmny\\\"]\\n出力項目名リスト=[\\\"trd_total_amtmny\\\", \\\"point_sub_amtmny\\\"]\\n\\n# 備考として追加する項目名の配列\\n追加項目名リスト = [\\\"trd_total_amtmny_note\\\", \\\"point_sub_amtmny_note\\\"]\\n### 作成時の修正箇所ここまで ###\\n\\n# メインパラメータ\\ntop = 100000\\nbottom = 99\\n\\n# 金額丸め\\ndef convert_amount(amount, top, bottom):\\n    # NullならNullを返す\\n    if amount is None:\\n        return None\\n\\n    # string型なら Decimal型 に変換、int型や小数型ならそのまま。空文字は例外対応\\n    try:\\n        tmp_amount = Decimal(amount) if isinstance(amount, str) else amount\\n    except InvalidOperation:\\n        return None\\n\\n    if tmp_amount <= Decimal(bottom):\\n        return bottom\\n    elif tmp_amount >= Decimal(top):\\n        return top\\n    else:\\n        return amount\\n\\n# 金額層備考\\ndef convert_amount_memo(amount, top, bottom):\\n    # Nullなら\\\"-\\\"を返す\\n    if amount is None:\\n        return \\\"－\\\"\\n\\n    # string型なら Decimal型 に変換、int型や小数型ならそのまま。空文字は例外対応\\n    try:\\n        tmp_amount = Decimal(amount) if isinstance(amount, str) else amount\\n    except InvalidOperation:\\n        return \\\"－\\\"\\n\\n    if tmp_amount <= Decimal(bottom):\\n        return f\\\"{bottom}円以下\\\"\\n    elif tmp_amount >= Decimal(top):\\n        return f\\\"{top}円以上\\\"\\n    return \\\"－\\\"\\n\\n# UDFの定義\\nconvert_udf_amount = udf(lambda amount: convert_amount(amount, top, bottom), StringType())\\nconvert_udf_memo = udf(lambda amount: convert_amount_memo(amount, top, bottom), StringType())\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# ループ処理で各項目を変換（金額丸め）\\nfor 入力項目名, 出力項目名 in zip(入力項目名リスト, 出力項目名リスト):\\n    df = df.withColumn(出力項目名, convert_udf_amount(df[入力項目名]))\\n\\n# ループ処理で各項目の備考を追加\\nfor 入力項目名, 追加項目名 in zip(入力項目名リスト, 追加項目名リスト):\\n    df = df.withColumn(追加項目名, convert_udf_memo(df[入力項目名]))\\n\\n# DynamicFrameに変換して返す\\noutput_dyf = DynamicFrame.fromDF(df, glueContext, \\\"output\\\")\\nreturn DynamicFrameCollection({\\\"CustomTransform0\\\": output_dyf}, glueContext)\\n \",\"Inputs\":[\"node-1727682543308\"],\"Name\":\"【加工】金額加工（上限下限丸め）\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"work_dt\",\"Type\":\"string\"},{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"trnl_num\",\"Type\":\"string\"},{\"Name\":\"trd_num\",\"Type\":\"string\"},{\"Name\":\"trd_knd\",\"Type\":\"string\"},{\"Name\":\"grt_div\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny\",\"Type\":\"string\"},{\"Name\":\"trd_grt_point\",\"Type\":\"decimal(10,2)\"},{\"Name\":\"trd_gvbk_point\",\"Type\":\"decimal(10,2)\"},{\"Name\":\"trnl_dt\",\"Type\":\"string\"},{\"Name\":\"trnl_tm\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"string\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny_note\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny_note\",\"Type\":\"string\"}]}]}},\"node-1730279130441\":{\"CustomCode\":{\"ClassName\":\"MyTransformSortFeilds\",\"Code\":\"from awsglue.dynamicframe import DynamicFrame, DynamicFrameCollection\\n\\n### 作成時の修正箇所ここから ###\\n# 並び替えたい順序で全項目名を記載する\\n項目順序 = [\\\"work_dt\\\", \\\"odakyu_cust_num\\\", \\\"agt_num\\\", \\\"agt_idtfer_num\\\", \\\"rpstve_cmpy_cd\\\", \\\"cmpy_cd\\\", \\\"office_cd\\\", \\\"store_cd\\\", \\\"trnl_num\\\", \\\"trd_num\\\", \\\"trd_knd\\\", \\\"grt_div\\\", \\\"trd_total_amtmny\\\", \\\"trd_total_amtmny_note\\\", \\\"point_sub_amtmny\\\", \\\"point_sub_amtmny_note\\\", \\\"trd_grt_point\\\", \\\"trd_grt_point_note\\\", \\\"trd_gvbk_point\\\", \\\"trd_gvbk_point_note\\\", \\\"trnl_dt\\\", \\\"trnl_tm\\\", \\\"dwh_reg_datetm\\\", \\\"orion_process_datetm\\\"]\\n### 作成時の修正箇所ここまで ###\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# 指定した順序でDataFrameのカラムを並び替え\\ndf = df.select(項目順序)\\n\\n# DynamicFrameに変換して返す\\noutput_dyf = DynamicFrame.fromDF(df, glueContext, \\\"output\\\")\\nreturn DynamicFrameCollection({\\\"CustomTransform0\\\": output_dyf}, glueContext)\\n\",\"Inputs\":[\"node-1730278909444\"],\"Name\":\"【加工】項目順序の並替え\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"work_dt\",\"Type\":\"string\"},{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"trnl_num\",\"Type\":\"string\"},{\"Name\":\"trd_num\",\"Type\":\"string\"},{\"Name\":\"trd_knd\",\"Type\":\"string\"},{\"Name\":\"grt_div\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny_note\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny_note\",\"Type\":\"string\"},{\"Name\":\"trd_grt_point\",\"Type\":\"string\"},{\"Name\":\"trd_grt_point_note\",\"Type\":\"string\"},{\"Name\":\"trd_gvbk_point\",\"Type\":\"string\"},{\"Name\":\"trd_gvbk_point_note\",\"Type\":\"string\"},{\"Name\":\"trnl_dt\",\"Type\":\"string\"},{\"Name\":\"trnl_tm\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"string\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"}]}]}}}",
  "sourceControlDetails" : {
    "provider" : "GITHUB",
    "repository" : "ORioN_nonPIA",
    "branch" : "master",
    "folder" : "main"
  }
}