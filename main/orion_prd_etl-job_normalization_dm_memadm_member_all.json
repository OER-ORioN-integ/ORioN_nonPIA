{
  "name" : "orion_prd_etl-job_normalization_dm_memadm_member_all",
  "jobMode" : "VISUAL",
  "description" : "",
  "role" : "arn:aws:iam::142980225941:role/orion_prd_glue-role",
  "executionProperty" : {
    "maxConcurrentRuns" : 1
  },
  "command" : {
    "name" : "glueetl",
    "scriptLocation" : "s3://orion-prd-etljob/scripts/orion_prd_etl-job_normalization_dm_memadm_member_all.py",
    "pythonVersion" : "3"
  },
  "defaultArguments" : {
    "--enable-metrics" : "true",
    "--spark-event-logs-path" : "s3://aws-glue-assets-142980225941-ap-northeast-1/sparkHistoryLogs/",
    "--enable-job-insights" : "true",
    "--enable-observability-metrics" : "true",
    "--enable-glue-datacatalog" : "true",
    "--EXECUTE_TIMESTAMP_ISO_STR" : "2024-11-01T01:01:01.000Z",
    "--SOURCE_SYSTEM" : "DMP",
    "--job-bookmark-option" : "job-bookmark-disable",
    "--DATA_NAME" : "dm_memadm_member_all",
    "--job-language" : "python",
    "--TempDir" : "s3://orion-prd-etljob/tmp/"
  },
  "maxRetries" : 0,
  "allocatedCapacity" : 2,
  "timeout" : 120,
  "maxCapacity" : 2.0,
  "glueVersion" : "4.0",
  "numberOfWorkers" : 2,
  "workerType" : "G.1X",
  "executionClass" : "STANDARD",
  "codeGenConfigurationNodes" : "{\"node-1727674889392\":{\"S3CsvSource\":{\"AdditionalOptions\":{\"EnableSamplePath\":true,\"SamplePath\":\"s3://orion-prd-work/DMP/dm_memadm_member_all/schema/dm_memadm_member_all_schema.csv\"},\"Escaper\":\"\\\\\",\"Exclusions\":[],\"Name\":\"【必須】連携された匿名化済みのデータ\",\"OptimizePerformance\":false,\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"card_knd_cd\",\"Type\":\"string\"},{\"Name\":\"dmntn_cd\",\"Type\":\"string\"},{\"Name\":\"tying_div\",\"Type\":\"string\"},{\"Name\":\"pac_div\",\"Type\":\"string\"},{\"Name\":\"old_card_num\",\"Type\":\"string\"},{\"Name\":\"new_card_num\",\"Type\":\"string\"},{\"Name\":\"prnt_card_num\",\"Type\":\"string\"},{\"Name\":\"itnl_seq\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"itdcr_cd\",\"Type\":\"string\"},{\"Name\":\"srnm_kanji\",\"Type\":\"string\"},{\"Name\":\"name_kanji\",\"Type\":\"string\"},{\"Name\":\"srnm_hwch_kana\",\"Type\":\"string\"},{\"Name\":\"name_hwch_kana\",\"Type\":\"string\"},{\"Name\":\"gender_cd\",\"Type\":\"string\"},{\"Name\":\"btd_ad\",\"Type\":\"string\"},{\"Name\":\"adrs_cd\",\"Type\":\"string\"},{\"Name\":\"zipcd_hypn\",\"Type\":\"string\"},{\"Name\":\"pfturs_kanji\",\"Type\":\"string\"},{\"Name\":\"city_name_kanji\",\"Type\":\"string\"},{\"Name\":\"town_kanji\",\"Type\":\"string\"},{\"Name\":\"chome_name_kanji\",\"Type\":\"string\"},{\"Name\":\"adfyaddr_kanji\",\"Type\":\"string\"},{\"Name\":\"home_telphn_num_hypn\",\"Type\":\"string\"},{\"Name\":\"home_fax_num_hypn\",\"Type\":\"string\"},{\"Name\":\"home_mophn_num_hypn\",\"Type\":\"string\"},{\"Name\":\"dm_div\",\"Type\":\"string\"},{\"Name\":\"dm_snd_flag\",\"Type\":\"string\"},{\"Name\":\"bnkact_sts\",\"Type\":\"string\"},{\"Name\":\"bnkact_stup_dt\",\"Type\":\"string\"},{\"Name\":\"re_pulsh_dt\",\"Type\":\"string\"},{\"Name\":\"card_pulsh_dt\",\"Type\":\"string\"},{\"Name\":\"point_smup_trsfr_dt\",\"Type\":\"string\"},{\"Name\":\"sw_dt\",\"Type\":\"string\"},{\"Name\":\"wthdw_dt\",\"Type\":\"string\"},{\"Name\":\"wthdw_div\",\"Type\":\"string\"},{\"Name\":\"first_use_dt\",\"Type\":\"string\"},{\"Name\":\"eftvns_ddln\",\"Type\":\"string\"},{\"Name\":\"point_cal_stdrd_dt\",\"Type\":\"string\"},{\"Name\":\"pfssn_knd\",\"Type\":\"string\"},{\"Name\":\"serve_plce_kana\",\"Type\":\"string\"},{\"Name\":\"rsidce_knd\",\"Type\":\"string\"},{\"Name\":\"anlicm_div\",\"Type\":\"string\"},{\"Name\":\"aqstn_sub_div\",\"Type\":\"string\"},{\"Name\":\"ocrce_div\",\"Type\":\"string\"},{\"Name\":\"data_prces_dt\",\"Type\":\"string\"},{\"Name\":\"age\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"string\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"}]}],\"Paths\":[\"s3://orion-prd-work/DMP/dm_memadm_member_all/raw_tmp/\"],\"QuoteChar\":\"quote\",\"Separator\":\"comma\",\"WithHeader\":true}},\"node-1727676004506\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1727675945895\"],\"Name\":\"【加工時必須】加工後処理(定義した日付フォーマットに変換)\"}},\"node-1727675890558\":{\"ApplyMapping\":{\"Inputs\":[\"node-1727674889392\"],\"Mapping\":[{\"Dropped\":false,\"FromPath\":[\"odakyu_cust_num\"],\"FromType\":\"string\",\"ToKey\":\"odakyu_cust_num\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"agt_num\"],\"FromType\":\"string\",\"ToKey\":\"agt_num\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"agt_idtfer_num\"],\"FromType\":\"string\",\"ToKey\":\"agt_idtfer_num\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"card_knd_cd\"],\"FromType\":\"string\",\"ToKey\":\"card_knd_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"dmntn_cd\"],\"FromType\":\"string\",\"ToKey\":\"dmntn_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"tying_div\"],\"FromType\":\"string\",\"ToKey\":\"tying_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"pac_div\"],\"FromType\":\"string\",\"ToKey\":\"pac_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"old_card_num\"],\"FromType\":\"string\",\"ToKey\":\"old_card_num\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"new_card_num\"],\"FromType\":\"string\",\"ToKey\":\"new_card_num\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"prnt_card_num\"],\"FromType\":\"string\",\"ToKey\":\"prnt_card_num\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"itnl_seq\"],\"FromType\":\"string\",\"ToKey\":\"itnl_seq\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"rpstve_cmpy_cd\"],\"FromType\":\"string\",\"ToKey\":\"rpstve_cmpy_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"cmpy_cd\"],\"FromType\":\"string\",\"ToKey\":\"cmpy_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"office_cd\"],\"FromType\":\"string\",\"ToKey\":\"office_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"store_cd\"],\"FromType\":\"string\",\"ToKey\":\"store_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"itdcr_cd\"],\"FromType\":\"string\",\"ToKey\":\"itdcr_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"srnm_kanji\"],\"FromType\":\"string\",\"ToKey\":\"srnm_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"name_kanji\"],\"FromType\":\"string\",\"ToKey\":\"name_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"srnm_hwch_kana\"],\"FromType\":\"string\",\"ToKey\":\"srnm_hwch_kana\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"name_hwch_kana\"],\"FromType\":\"string\",\"ToKey\":\"name_hwch_kana\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"gender_cd\"],\"FromType\":\"string\",\"ToKey\":\"gender_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"btd_ad\"],\"FromType\":\"string\",\"ToKey\":\"btd_ad\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"adrs_cd\"],\"FromType\":\"string\",\"ToKey\":\"adrs_cd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"zipcd_hypn\"],\"FromType\":\"string\",\"ToKey\":\"zipcd_hypn\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"pfturs_kanji\"],\"FromType\":\"string\",\"ToKey\":\"pfturs_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"city_name_kanji\"],\"FromType\":\"string\",\"ToKey\":\"city_name_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"town_kanji\"],\"FromType\":\"string\",\"ToKey\":\"town_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"chome_name_kanji\"],\"FromType\":\"string\",\"ToKey\":\"chome_name_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"adfyaddr_kanji\"],\"FromType\":\"string\",\"ToKey\":\"adfyaddr_kanji\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"home_telphn_num_hypn\"],\"FromType\":\"string\",\"ToKey\":\"home_telphn_num_hypn\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"home_fax_num_hypn\"],\"FromType\":\"string\",\"ToKey\":\"home_fax_num_hypn\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"home_mophn_num_hypn\"],\"FromType\":\"string\",\"ToKey\":\"home_mophn_num_hypn\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"dm_div\"],\"FromType\":\"string\",\"ToKey\":\"dm_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"dm_snd_flag\"],\"FromType\":\"string\",\"ToKey\":\"dm_snd_flag\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"bnkact_sts\"],\"FromType\":\"string\",\"ToKey\":\"bnkact_sts\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"bnkact_stup_dt\"],\"FromType\":\"string\",\"ToKey\":\"bnkact_stup_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"re_pulsh_dt\"],\"FromType\":\"string\",\"ToKey\":\"re_pulsh_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"card_pulsh_dt\"],\"FromType\":\"string\",\"ToKey\":\"card_pulsh_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"point_smup_trsfr_dt\"],\"FromType\":\"string\",\"ToKey\":\"point_smup_trsfr_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"sw_dt\"],\"FromType\":\"string\",\"ToKey\":\"sw_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"wthdw_dt\"],\"FromType\":\"string\",\"ToKey\":\"wthdw_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"wthdw_div\"],\"FromType\":\"string\",\"ToKey\":\"wthdw_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"first_use_dt\"],\"FromType\":\"string\",\"ToKey\":\"first_use_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"eftvns_ddln\"],\"FromType\":\"string\",\"ToKey\":\"eftvns_ddln\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"point_cal_stdrd_dt\"],\"FromType\":\"string\",\"ToKey\":\"point_cal_stdrd_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"pfssn_knd\"],\"FromType\":\"string\",\"ToKey\":\"pfssn_knd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"serve_plce_kana\"],\"FromType\":\"string\",\"ToKey\":\"serve_plce_kana\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"rsidce_knd\"],\"FromType\":\"string\",\"ToKey\":\"rsidce_knd\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"anlicm_div\"],\"FromType\":\"string\",\"ToKey\":\"anlicm_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"aqstn_sub_div\"],\"FromType\":\"string\",\"ToKey\":\"aqstn_sub_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"ocrce_div\"],\"FromType\":\"string\",\"ToKey\":\"ocrce_div\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"data_prces_dt\"],\"FromType\":\"string\",\"ToKey\":\"data_prces_dt\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"age\"],\"FromType\":\"string\",\"ToKey\":\"age\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"dwh_reg_datetm\"],\"FromType\":\"string\",\"ToKey\":\"dwh_reg_datetm\",\"ToType\":\"string\"},{\"Dropped\":false,\"FromPath\":[\"orion_process_datetm\"],\"FromType\":\"string\",\"ToKey\":\"orion_process_datetm\",\"ToType\":\"string\"}],\"Name\":\"【必須】データ型を変換\"}},\"node-1728609073799\":{\"CustomCode\":{\"ClassName\":\"MyTransformOutputOneFileParquet\",\"Code\":\"from datetime import datetime, timedelta, timezone\\nimport boto3\\nfrom awsglue.utils import getResolvedOptions\\nfrom pyspark.sql import DataFrame\\n\\n### 作成時の修正箇所ここから ###\\n#  本ノードは作成時のパラメータ設定不要です。このままお使いください。\\n### 作成時の修正箇所ここまで ###\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformOutputOneFileParquet) start\\\")\\n\\n# Glueジョブ引数の取得\\nglue_params = getResolvedOptions(sys.argv, [\\\"SOURCE_SYSTEM\\\", \\\"DATA_NAME\\\", \\\"EXECUTE_TIMESTAMP_ISO_STR\\\"])\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileParquet) glue_params:{glue_params}\\\")\\n\\n# 連携元システム名（DMP/ONE/OCTPASS/MANUAL）\\nsource_system = glue_params.get(\\\"SOURCE_SYSTEM\\\", None)\\n# データ名（物理テーブル名）\\ndata_name = glue_params.get(\\\"DATA_NAME\\\", None)\\n# 実行日時\\nexecute_timestamp_iso_str = glue_params.get(\\\"EXECUTE_TIMESTAMP_ISO_STR\\\", None)\\n\\n# プレフィックスヘッド\\nprefix_head = f\\\"{source_system}/{data_name}\\\"\\n\\n# 作業用バケット\\nwork_bucket = \\\"orion-prd-work\\\"\\n# workディレクトリ\\nwork_dir = f\\\"{prefix_head}/raw_work/\\\"\\n# 一時出力先s3パス\\nwork_s3_path = f\\\"s3://{work_bucket}/{work_dir}\\\"\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# workフォルダにparquet形式で出力\\ndf.coalesce(1).write.option(\\\"compression\\\", \\\"snappy\\\").mode(\\\"overwrite\\\").parquet(work_s3_path)\\n\\n# 関数定義\\ndef get_process_timestamp_from_df(df: DataFrame, column_name: str) -> str:\\n    \\\"\\\"\\\"DFからデータ統合基盤処理日時 文字列を取得する\\n    Args:\\n        df (pysoar.sql.DataFrame): データフレーム\\n        column_name (str): データ統合基盤処理日時項目名\\n    Returns:\\n        str: yyyymmddhhmmss\\n    \\\"\\\"\\\"\\n    # JSTタイムスタンプカラムの値を取得（yyyy/mm/dd hh:mm:ss形式）\\n    orion_process_datetm = df.select(column_name).first()[0]\\n    # yyyymmddhhmmss形式に変換\\n    res_datetm_str = datetime.strptime(orion_process_datetm, \\\"%Y/%m/%d %H:%M:%S\\\").strftime(\\\"%Y%m%d%H%M%S\\\")\\n    return res_datetm_str\\n\\ndef convert_timestamp_iso_to_jst(iso_time_str: str, output_format: str) -> str:\\n    \\\"\\\"\\\"ISO日時文字列を指定フォーマットに変換\\n    Args:\\n        iso_time_str (str): ISO日時文字列\\n        output_format (str): 出力フォーマット\\n    Returns:\\n        str: 指定フォーマット形式文字列\\n    \\\"\\\"\\\"\\n    # UTCの日時文字列をパースしてdatetimeオブジェクトに変換\\n    utc_time = datetime.strptime(iso_time_str, \\\"%Y-%m-%dT%H:%M:%S.%fZ\\\")\\n    # JSTへの変換（UTC+9時間）\\n    jst_time = utc_time.replace(tzinfo=timezone.utc).astimezone(timezone(timedelta(hours=9)))\\n    # フォーマット変換\\n    jst_time_str = jst_time.strftime(output_format)\\n    return jst_time_str\\n\\n# ■実行日時をJSTのyyyyymmddhhmmss文字列に変換\\n# DFの処理日時項目名\\nORION_PROCESS_DATETM = \\\"orion_process_datetm\\\"\\nif ORION_PROCESS_DATETM in df.columns and df.select(ORION_PROCESS_DATETM).count() != 0:\\n    execute_timestamp_str = get_process_timestamp_from_df(df=df, column_name=ORION_PROCESS_DATETM)\\n    print(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (get_process_timestamp_from_df) execute_timestamp_str:{execute_timestamp_str}\\\")\\nelse:\\n    execute_timestamp_str = convert_timestamp_iso_to_jst(iso_time_str=execute_timestamp_iso_str, output_format=\\\"%Y%m%d%H%M%S\\\")\\n    print(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (convert_timestamp_iso_to_jst) execute_timestamp_str:{execute_timestamp_str}\\\")\\n\\n#  DWHバケット\\ndwh_bucket = \\\"orion-prd-dwh\\\"\\n# 連携先ディレクトリ\\nreceive_prefix = f\\\"{prefix_head}/receive\\\"\\n# 連携ファイル名\\nfile_name = f\\\"{data_name}_dwh_{execute_timestamp_str}.snappy.parquet\\\"\\n# 連携先key\\nfile_key = f\\\"{receive_prefix}/{file_name}\\\"\\n\\n# S3クライアントを使用してworkフォルダに出力したファイルをリネームして移動\\ns3 = boto3.client(\\\"s3\\\")\\nresponse = s3.list_objects_v2(Bucket=work_bucket, Prefix=work_dir)\\nfor obj in response.get(\\\"Contents\\\", []):\\n    if obj[\\\"Key\\\"].endswith(\\\".parquet\\\"):\\n        # ソース情報設定\\n        copy_source = {\\\"Bucket\\\": work_bucket, \\\"Key\\\": obj[\\\"Key\\\"]}\\n        print(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileParquet) copy_source:{copy_source}, dwh_bucket:{dwh_bucket}, file_key:{file_key}\\\")\\n        # コピーを実行\\n        s3.copy_object(CopySource=copy_source, Bucket=dwh_bucket, Key=file_key)\\n        # 削除を実行\\n        s3.delete_object(Bucket=work_bucket, Key=obj[\\\"Key\\\"])\\n        break\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformOutputOneFileParquet) end\\\")\\n\",\"Inputs\":[\"node-1733278594360\"],\"Name\":\"【必須】１ファイルでDWHバケットに出力\"}},\"node-1733278594360\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1733278590504\"],\"Name\":\"【加工時必須】加工後処理(定義した日時フォーマットへ変換)\"}},\"node-1727675945895\":{\"CustomCode\":{\"ClassName\":\"MyTransformDateFormat\",\"Code\":\"from pyspark.sql.functions import col, lit, regexp_replace, when\\n\\n### 作成時の修正箇所ここから ###\\n# 入力項目名と出力項目名の設定\\n入力項目名リスト=[\\\"btd_ad\\\",\\\"bnkact_stup_dt\\\",\\\"re_pulsh_dt\\\",\\\"card_pulsh_dt\\\",\\\"point_smup_trsfr_dt\\\",\\\"sw_dt\\\",\\\"wthdw_dt\\\",\\\"first_use_dt\\\",\\\"point_cal_stdrd_dt\\\",\\\"data_prces_dt\\\"]\\n出力項目名リスト=[\\\"btd_ad\\\",\\\"bnkact_stup_dt\\\",\\\"re_pulsh_dt\\\",\\\"card_pulsh_dt\\\",\\\"point_smup_trsfr_dt\\\",\\\"sw_dt\\\",\\\"wthdw_dt\\\",\\\"first_use_dt\\\",\\\"point_cal_stdrd_dt\\\",\\\"data_prces_dt\\\"]\\n### 作成時の修正箇所ここまで ###\\n\\n# 入力フォーマット\\nINPUT_FORMAT = r\\\"^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\"\\n# 最小値の設定\\nMIN_YMD = lit(\\\"1900-01-01\\\")\\nMIN_YMD_FORMAT = None\\n\\n# 条件文：\\n#   1)Nullならそのまま\\n#   2)Date文字列で、\\n#       2-1)MIN_YMD より小さいなら MIN_YMD_FORMAT に置換\\n#       2-2)それ以外なら\\\"-\\\"を\\\"/\\\"に置換\\n#   3)Date文字列でないないら、Noneを返す\\ndef mk_cond(col_name: str):\\n    return when(col(col_name).isNull(), None).when(col(col_name).substr(1, 10).rlike(INPUT_FORMAT), when(col(col_name).substr(1, 10) < MIN_YMD, MIN_YMD_FORMAT).otherwise(regexp_replace(col(col_name).substr(1, 10), \\\"-\\\", \\\"/\\\"))).otherwise(None)\\n\\nconds_dict = {出力項目名: mk_cond(入力項目名) for 入力項目名, 出力項目名 in zip(入力項目名リスト, 出力項目名リスト)}\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# 値のマスキング実施\\ndf = df.withColumns(conds_dict)\\n\\n# DynamicFrameに変換して返す\\noutput_dyf = DynamicFrame.fromDF(df, glueContext, \\\"output\\\")\\nreturn DynamicFrameCollection({\\\"CustomTransform0\\\": output_dyf}, glueContext)\",\"Inputs\":[\"node-1727675890558\"],\"Name\":\"【加工】定義した日付フォーマットに変換\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"card_knd_cd\",\"Type\":\"string\"},{\"Name\":\"dmntn_cd\",\"Type\":\"string\"},{\"Name\":\"tying_div\",\"Type\":\"string\"},{\"Name\":\"pac_div\",\"Type\":\"string\"},{\"Name\":\"old_card_num\",\"Type\":\"string\"},{\"Name\":\"new_card_num\",\"Type\":\"string\"},{\"Name\":\"prnt_card_num\",\"Type\":\"string\"},{\"Name\":\"itnl_seq\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"itdcr_cd\",\"Type\":\"string\"},{\"Name\":\"srnm_kanji\",\"Type\":\"string\"},{\"Name\":\"name_kanji\",\"Type\":\"string\"},{\"Name\":\"srnm_hwch_kana\",\"Type\":\"string\"},{\"Name\":\"name_hwch_kana\",\"Type\":\"string\"},{\"Name\":\"gender_cd\",\"Type\":\"string\"},{\"Name\":\"btd_ad\",\"Type\":\"string\"},{\"Name\":\"adrs_cd\",\"Type\":\"string\"},{\"Name\":\"zipcd_hypn\",\"Type\":\"string\"},{\"Name\":\"pfturs_kanji\",\"Type\":\"string\"},{\"Name\":\"city_name_kanji\",\"Type\":\"string\"},{\"Name\":\"town_kanji\",\"Type\":\"string\"},{\"Name\":\"chome_name_kanji\",\"Type\":\"string\"},{\"Name\":\"adfyaddr_kanji\",\"Type\":\"string\"},{\"Name\":\"home_telphn_num_hypn\",\"Type\":\"string\"},{\"Name\":\"home_fax_num_hypn\",\"Type\":\"string\"},{\"Name\":\"home_mophn_num_hypn\",\"Type\":\"string\"},{\"Name\":\"dm_div\",\"Type\":\"string\"},{\"Name\":\"dm_snd_flag\",\"Type\":\"string\"},{\"Name\":\"bnkact_sts\",\"Type\":\"string\"},{\"Name\":\"bnkact_stup_dt\",\"Type\":\"string\"},{\"Name\":\"re_pulsh_dt\",\"Type\":\"string\"},{\"Name\":\"card_pulsh_dt\",\"Type\":\"string\"},{\"Name\":\"point_smup_trsfr_dt\",\"Type\":\"string\"},{\"Name\":\"sw_dt\",\"Type\":\"string\"},{\"Name\":\"wthdw_dt\",\"Type\":\"string\"},{\"Name\":\"wthdw_div\",\"Type\":\"string\"},{\"Name\":\"first_use_dt\",\"Type\":\"string\"},{\"Name\":\"eftvns_ddln\",\"Type\":\"string\"},{\"Name\":\"point_cal_stdrd_dt\",\"Type\":\"string\"},{\"Name\":\"pfssn_knd\",\"Type\":\"string\"},{\"Name\":\"serve_plce_kana\",\"Type\":\"string\"},{\"Name\":\"rsidce_knd\",\"Type\":\"string\"},{\"Name\":\"anlicm_div\",\"Type\":\"string\"},{\"Name\":\"aqstn_sub_div\",\"Type\":\"string\"},{\"Name\":\"ocrce_div\",\"Type\":\"string\"},{\"Name\":\"data_prces_dt\",\"Type\":\"string\"},{\"Name\":\"age\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"string\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"}]}]}},\"node-1733278590504\":{\"CustomCode\":{\"ClassName\":\"MyTransformTimestampFormat\",\"Code\":\"from pyspark.sql.functions import col, lit, regexp_replace, when\\n\\n### 作成時の修正箇所ここから ###\\n# 入力項目名と出力項目名の設定\\n入力項目名リスト = [\\\"dwh_reg_datetm\\\", ]\\n出力項目名リスト = [\\\"dwh_reg_datetm\\\", ]\\n### 作成時の修正箇所ここまで ###\\n\\n# 入力フォーマット\\nINPUT_FORMAT = r\\\"^\\\\d{4}-\\\\d{2}-\\\\d{2}\\\"\\n# 最小値の設定\\nMIN_YMD = lit(\\\"1900-01-01\\\")\\nMIN_TIMESTAMP_FORMAT = None\\n\\n# 条件文：\\n#   1)Nullならそのまま、\\n#   2)timestamp文字列で、\\n#       2-1)MIN_YMD より小さいなら MIN_TIMESTAMP_FORMAT に置換、\\n#       2-2)それ以外なら\\\"-\\\"を\\\"/\\\"に置換\\n#   3)timestamp文字列でないないら、Noneを返す\\ndef mk_cond(col_name: str):\\n    return (\\n        when(col(col_name).isNull(), None).when(col(col_name).substr(1, 10).rlike(INPUT_FORMAT), when(col(col_name).substr(1, 10) < MIN_YMD, MIN_TIMESTAMP_FORMAT).otherwise(regexp_replace(col(col_name).substr(1, 19), \\\"-\\\", \\\"/\\\"))).otherwise(None)\\n    )\\n\\nconds_dict = {出力項目名: mk_cond(入力項目名) for 入力項目名, 出力項目名 in zip(入力項目名リスト, 出力項目名リスト)}\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# 値のマスキング実施\\ndf = df.withColumns(conds_dict)\\n\\n# DynamicFrameに変換して返す\\noutput_dyf = DynamicFrame.fromDF(df, glueContext, \\\"output\\\")\\nreturn DynamicFrameCollection({\\\"CustomTransform0\\\": output_dyf}, glueContext)\",\"Inputs\":[\"node-1727676004506\"],\"Name\":\"【加工】定義した日時フォーマットへ変換\"}}}",
  "sourceControlDetails" : {
    "provider" : "GITHUB",
    "repository" : "ORioN_nonPIA",
    "branch" : "master",
    "folder" : "main"
  }
}